const { spawn } = require('child_process');

module.exports = function renderDEMtoOutput(_params, _eventEmitter, _verbose=false) {

  console.log('vvvv', _verbose)
  outputfiletype = _params.filetype;
  var area = _params.area,
    areatype = _params.areatype,
    algo = _params.algo;

  var outputDEMfilename = area + '-' + algo +
    '-alt_' + String(_params.params.alt) + '-az_' + String(_params.params.az) + '-s_' +
    String(_params.params.s) + '-z_' + String(_params.params.z) + '.' +
    (outputfiletype == 'GTiff' ? 'tif' : outputfiletype.toLowerCase());

  var inputraster = './dem/gen/state/colorado/' + area + '/' + area + '.tif',
    outputpath = './public/dem/gen/state/colorado/' + area + '/' + algo + '/' + outputDEMfilename;
  var demArgs = [];

  // Hooks to incorporate other gdaldem algorithms - we only need to
  // update the front end and configure a few things on the server for
  // this to work.
  switch (algo) {
    case 'hillshade':
      demArgs.push(algo);
      for (key in _params) {
        if (key == 'filetype') {
          demArgs.push('-of', _params[key].toUpperCase());
        }

        if (key == 'params') {
          for (p in _params[key]) {
            demArgs.push('-' + p, _params[key][p]);
          }
        }
      }
      demArgs.push(inputraster, outputpath);
      break;

    // These cases will not get triggered as the user cannot
    // submit any other algo type than 'hillshade' - yet.
    case 'slope':
      demArgs.push(algo);
      demArgs.push(inputraster, outputpath);
      break;
    case 'aspect':
      demArgs.push(algo);
      demArgs.push(inputraster, outputpath);
      break;
  }


  if (_verbose) {
    var renderCommand = 'gdaldem'
    demArgs.forEach((arg) => {
      renderCommand += ' ' + arg;
    });
    console.log('***gdaldem command:::******', renderCommand);
  }

  // Environment variables
  var productionEnv = Object.create(process.env);
  productionEnv.NODE_ENV = 'production';

  const renderProcess = spawn('gdaldem', demArgs, {env: productionEnv, shell: true})
    .on('error', (error) => { throw error; });

  // Verbose output - removed for tidiness. Uncomment if you like.
  if (_verbose) {
    renderProcess.stdout.on('data', (data) => {
      console.log(data.toString('utf8'));
      if(data.toString('utf8') % 20 == 0) {
        console.log('TWENTIES');
      }
    });
  }

  renderProcess.on('close', (code) => {
    if (code == 0) {
      _eventEmitter.emit('dem-success', outputpath.substr(9));
    }
  });

}
